version: '3.9'

# Docker Compose для production с настроенным SSL

services:
  postgres:
    image: postgres:15-alpine
    container_name: cdek-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cdek_db}
      POSTGRES_USER: ${POSTGRES_USER:-cdek_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./cdek-api/init-db:/docker-entrypoint-initdb.d
    networks:
      - cdek-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-cdek_user} -d ${POSTGRES_DB:-cdek_db}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cdek-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cdek-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./cdek-api
      dockerfile: Dockerfile
      target: production
    container_name: cdek-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cdek_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-cdek_db}?schema=public
      - PORT=3000
      - CDEK_API_URL=${CDEK_API_URL}
      - CDEK_CLIENT_ID=${CDEK_CLIENT_ID}
      - CDEK_CLIENT_SECRET=${CDEK_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - DADATA_API_KEY=${DADATA_API_KEY}
      - DADATA_SECRET_KEY=${DADATA_SECRET_KEY}
    volumes:
      - ./cdek-api/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cdek-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: cdek-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - cdek-network
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost/ || exit 1']
      interval: 30s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: cdek-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf.template:/etc/nginx/conf.d/default.conf.template:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    depends_on:
      - backend
      - frontend
    networks:
      - cdek-network
    command: >
      sh -c "envsubst '$${DOMAIN_NAME}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf 
      && nginx -g 'daemon off;'"

  certbot:
    image: certbot/certbot:latest
    container_name: cdek-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - cdek-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
  nginx_logs:

networks:
  cdek-network:
    driver: bridge
