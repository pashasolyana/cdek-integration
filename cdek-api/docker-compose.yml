services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cdek-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - cdek-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Основное приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cdek-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
      - CDEK_API_URL=${CDEK_API_URL}
      - CDEK_CLIENT_ID=${CDEK_CLIENT_ID}
      - CDEK_CLIENT_SECRET=${CDEK_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REDIS_URL=${REDIS_URL}
    ports:
      - '${PORT}:${PORT}'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cdek-network
    volumes:
      - ./uploads:/app/uploads # для возможного хранения файлов
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:${PORT}/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: cdek-redis
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:6379'
    networks:
      - cdek-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer для управления БД (опционально, для разработки)
  adminer:
    image: adminer:latest
    container_name: cdek-adminer
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '${ADMINER_PORT}:8080'
    networks:
      - cdek-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cdek-network:
    driver: bridge