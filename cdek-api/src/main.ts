import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger, BadRequestException } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { AppModule } from './app.module';
import { JwtAuthGuard } from './auth/guards/jwt-auth.guard';
import helmet from 'helmet';
import cookieParser from 'cookie-parser';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const logger = new Logger('Bootstrap');
  const configService = app.get(ConfigService);

  // Security middleware
  app.use(
    helmet({
      crossOriginEmbedderPolicy: false,
      contentSecurityPolicy: {
        directives: {
          imgSrc: [`'self'`, 'data:', 'https:'],
          scriptSrc: [
            `'self'`,
            `'unsafe-inline'`,
            'https://cdnjs.cloudflare.com',
          ],
          styleSrc: [
            `'self'`,
            `'unsafe-inline'`,
            'https://cdnjs.cloudflare.com',
          ],
        },
      },
    }),
  );

  // Cookie parser for JWT tokens
  app.use(cookieParser());

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
      exceptionFactory: (errors) => {
        const formattedErrors = errors.reduce((accumulator, error) => {
          accumulator[error.property] = Object.values(error.constraints || {});
          return accumulator;
        }, {});

        const exception = new BadRequestException({
          statusCode: 400,
          message: 'Validation failed',
          errors: formattedErrors,
        });

        return exception;
      },
    }),
  );

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π guard –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // const jwtAuthGuard = app.get(JwtAuthGuard);
  // app.useGlobalGuards(jwtAuthGuard);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.setGlobalPrefix('api');

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS —Å —É—á–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const corsOrigins = configService.get<string>('CORS_ORIGINS')?.split(',') || [
    'http://localhost:5173',
    'http://localhost:3000',
  ];

  app.enableCors({
    origin: corsOrigins,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    credentials: true, // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const config = new DocumentBuilder()
    .setTitle('CDEK Integration API')
    .setDescription(
      `
      API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–ª—É–∂–±–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ CDEK —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
      
      –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
      - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JWT + httpOnly cookies)
      - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ CDEK API
      - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
      - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–Ω–∫—Ç–∞—Ö –≤—ã–¥–∞—á–∏
      - –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
      - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
      
      –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
      - JWT —Ç–æ–∫–µ–Ω—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (15 –º–∏–Ω—É—Ç)
      - Refresh —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      - HttpOnly cookies –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS
      - Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫
      - Helmet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      - CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    `,
    )
    .setVersion('1.0')
    .setContact(
      'API Support',
      'https://github.com/your-repo',
      'support@yourdomain.com',
    )
    .setLicense('MIT', 'https://opensource.org/licenses/MIT')
    .addCookieAuth('access_token', {
      type: 'apiKey',
      in: 'cookie',
      name: 'access_token',
      description: 'JWT Access Token in httpOnly cookie',
    })
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Enter JWT token',
        in: 'header',
      },
      'JWT-auth',
    )
    .addServer('http://localhost:3000/api', 'Development server')
    .addServer('https://your-api-domain.com/api', 'Production server')
    .addTag('Auth', 'Endpoints –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    .addTag('CDEK API', 'Endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CDEK API')
    .addTag('Health', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api-docs', app, document, {
    customSiteTitle: 'CDEK Integration API Documentation',
    customfavIcon: 'https://cdek.ru/favicon.ico',
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞
  const port = configService.get<number>('PORT') || 3000;

  await app.listen(port);

  logger.log(`üöÄ Application is running on: http://localhost:${port}`);
  logger.log(
    `üìö Swagger documentation is available on: http://localhost:${port}/api-docs`,
  );
  logger.log(
    `ü©∫ Health check is available on: http://localhost:${port}/api/health`,
  );
  logger.log(`üîê Auth endpoints: http://localhost:${port}/api/auth/*`);
  logger.log(
    `üóÉÔ∏è  Database admin is available on: http://localhost:8080 (if using docker-compose)`,
  );
  logger.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);

  // –í production –ª–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (process.env.NODE_ENV === 'production') {
    logger.log('üîí Security features enabled:');
    logger.log('  - Helmet security headers');
    logger.log('  - CORS protection');
    logger.log('  - Rate limiting');
    logger.log('  - JWT with httpOnly cookies');
    logger.log('  - Input validation & sanitization');
  }
}

bootstrap().catch((error) => {
  Logger.error('‚ùå Error starting server', error, 'Bootstrap');
  process.exit(1);
});
