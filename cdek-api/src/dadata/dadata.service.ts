import { Injectable, Logger, HttpException, HttpStatus } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios, { AxiosInstance } from 'axios';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Dadata
 * 
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
 * - –ü–æ–¥—Å–∫–∞–∑–∫–∏: https://dadata.ru/api/suggest/address/
 * - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è: https://dadata.ru/api/clean/address/
 * 
 * API Endpoints:
 * - –ü–æ–¥—Å–∫–∞–∑–∫–∏: POST https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address
 * - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è: POST https://cleaner.dadata.ru/api/v1/clean/address
 */
@Injectable()
export class DadataService {
  private readonly logger = new Logger(DadataService.name);
  private readonly suggestClient: AxiosInstance;
  private readonly cleanClient: AxiosInstance;
  private readonly apiKey: string;
  private readonly secretKey: string;

  constructor(private readonly configService: ConfigService) {
    this.apiKey = this.configService.get<string>('DADATA_API_TOKEN') || '';
    this.secretKey = this.configService.get<string>('DADATA_SECRET_KEY') || '';

    if (!this.apiKey) {
      this.logger.warn('‚ö†Ô∏è  DADATA_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
    }
    if (!this.secretKey) {
      this.logger.warn('‚ö†Ô∏è  DADATA_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏)');
    }

    // –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    this.suggestClient = axios.create({
      baseURL: 'https://suggestions.dadata.ru/suggestions/api/4_1/rs',
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Token ${this.apiKey}`,
      },
    });

    // –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
    this.cleanClient = axios.create({
      baseURL: 'https://cleaner.dadata.ru/api/v1',
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Token ${this.apiKey}`,
        'X-Secret': this.secretKey,
      },
    });

    this.setupInterceptors();
  }

  private setupInterceptors() {
    [this.suggestClient, this.cleanClient].forEach((client) => {
      client.interceptors.request.use(
        (config) => {
          this.logger.debug(`üì§ Dadata: ${config.method?.toUpperCase()} ${config.url}`);
          return config;
        },
        (error) => Promise.reject(error),
      );

      client.interceptors.response.use(
        (response) => {
          this.logger.debug(`‚úÖ Dadata: ${response.status}`);
          return response;
        },
        (error) => {
          this.logger.error(`‚ùå Dadata Error: ${error.response?.status || error.message}`);
          return Promise.reject(error);
        },
      );
    });
  }

  // ========== 1. –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø –ê–î–†–ï–°–û–í ==========

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (API Clean)
   * POST https://cleaner.dadata.ru/api/v1/clean/address
   * 
   * ‚úîÔ∏è –†–∞–∑–±–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –ø–æ–ª—è–º (—Ä–µ–≥–∏–æ–Ω, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)
   * ‚úîÔ∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
   * ‚úîÔ∏è –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
   * ‚úîÔ∏è –î–æ—Å—Ç–∞–µ—Ç –∫–æ–¥—ã –ö–õ–ê–î–†, –§–ò–ê–°, –û–ö–ê–¢–û, –û–ö–¢–ú–û, –ò–§–ù–°
   */
  async cleanAddress(addresses: string[]) {
    if (!this.secretKey) {
      throw new HttpException(
        'DADATA_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–µ–π',
        HttpStatus.SERVICE_UNAVAILABLE,
      );
    }

    try {
      this.logger.log(`üìç –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ (${addresses.length} —à—Ç.)`);
      const response = await this.cleanClient.post('/clean/address', addresses);
      this.logger.log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ: ${response.data.length} –∞–¥—Ä–µ—Å–æ–≤`);
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤');
    }
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
   */
  async cleanSingleAddress(address: string) {
    const results = await this.cleanAddress([address]);
    return results[0];
  }

  // ========== 2. –ü–û–î–°–ö–ê–ó–ö–ò –ü–û –ê–î–†–ï–°–ê–ú ==========

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º (API Suggest)
   * POST https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address
   * 
   * ‚úîÔ∏è –ò—â–µ—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ –ª—é–±–æ–π —á–∞—Å—Ç–∏ (–æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã)
   * ‚úîÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º (–†–æ—Å—Å–∏—è –¥–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –ë–µ–ª–∞—Ä—É—Å—å/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω/–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –¥–æ –¥–æ–º–∞)
   * ‚úîÔ∏è –ù–∞—Ö–æ–¥–∏—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º (–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫ ‚Üí –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)
   * ‚úîÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
   * ‚úîÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –∏ –§–ò–ê–°-–∫–æ–¥—É
   */
  async suggestAddress(query: string, options?: {
    count?: number;
    language?: 'ru' | 'en';
    division?: 'administrative' | 'municipal';
    locations?: Array<{
      kladr_id?: string;
      fias_id?: string;
      region_fias_id?: string;
      area_fias_id?: string;
      city_fias_id?: string;
      settlement_fias_id?: string;
      city?: string;
      region?: string;
      country_iso_code?: string;
    }>;
    locations_geo?: Array<{
      lat: number;
      lon: number;
      radius_meters?: number;
      radius_km?: number;
    }>;
    locations_boost?: Array<{
      kladr_id?: string;
    }>;
    from_bound?: {
      value: 'country' | 'region' | 'area' | 'city' | 'settlement' | 'street' | 'house' | 'flat';
    };
    to_bound?: {
      value: 'country' | 'region' | 'area' | 'city' | 'settlement' | 'street' | 'house' | 'flat';
    };
  }) {
    try {
      this.logger.log(`üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤: "${query}"`);
      
      const response = await this.suggestClient.post('/suggest/address', {
        query,
        count: options?.count || 10,
        language: options?.language,
        division: options?.division,
        locations: options?.locations,
        locations_geo: options?.locations_geo,
        locations_boost: options?.locations_boost,
        from_bound: options?.from_bound,
        to_bound: options?.to_bound,
      });

      const count = response.data.suggestions?.length || 0;
      this.logger.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${count} –ø–æ–¥—Å–∫–∞–∑–æ–∫`);
      
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∞–¥—Ä–µ—Å–∞–º');
    }
  }

  /**
   * –ì—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞)
   */
  async suggestAddressByType(
    query: string,
    fromBound: 'country' | 'region' | 'area' | 'city' | 'settlement' | 'street' | 'house' | 'flat',
    toBound: 'country' | 'region' | 'area' | 'city' | 'settlement' | 'street' | 'house' | 'flat',
    count = 10,
  ) {
    return this.suggestAddress(query, {
      count,
      from_bound: { value: fromBound },
      to_bound: { value: toBound },
    });
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥–∞–º
   */
  async suggestCity(query: string, count = 10) {
    return this.suggestAddressByType(query, 'city', 'city', count);
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ —É–ª–∏—Ü–∞–º
   */
  async suggestStreet(query: string, cityKladr?: string, count = 10) {
    const locations = cityKladr ? [{ kladr_id: cityKladr }] : undefined;
    return this.suggestAddress(query, {
      count,
      from_bound: { value: 'street' },
      to_bound: { value: 'street' },
      locations,
    });
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –¥–æ–º–∞–º
   */
  async suggestHouse(query: string, streetKladr?: string, count = 10) {
    const locations = streetKladr ? [{ kladr_id: streetKladr }] : undefined;
    return this.suggestAddress(query, {
      count,
      from_bound: { value: 'house' },
      to_bound: { value: 'house' },
      locations,
    });
  }

  // ========== 3. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É
   */
  async geocodeAddress(query: string) {
    try {
      const response = await this.suggestAddress(query, { count: 1 });
      
      if (response.suggestions && response.suggestions.length > 0) {
        const s = response.suggestions[0];
        return {
          address: s.value,
          unrestricted_value: s.unrestricted_value,
          latitude: s.data.geo_lat ? parseFloat(s.data.geo_lat) : null,
          longitude: s.data.geo_lon ? parseFloat(s.data.geo_lon) : null,
          postal_code: s.data.postal_code,
          kladr_id: s.data.kladr_id,
          fias_id: s.data.fias_id,
          qc_geo: s.data.qc_geo,
          data: s.data,
        };
      }

      return null;
    } catch (error: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
   */
  async reverseGeocode(latitude: number, longitude: number, radiusMeters = 100) {
    try {
      const response = await this.suggestClient.post('/geolocate/address', {
        lat: latitude,
        lon: longitude,
        radius_meters: radiusMeters,
        count: 1,
      });

      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ IP
   */
  async detectCityByIp(ip: string) {
    try {
      const response = await this.suggestClient.post('/iplocate/address', { ip });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ IP');
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –ø–æ ID (–§–ò–ê–°, –ö–õ–ê–î–†, –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä)
   */
  async findById(id: string) {
    try {
      const response = await this.suggestClient.post('/findById/address', {
        query: id,
      });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID');
    }
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º (–ò–ù–ù, –Ω–∞–∑–≤–∞–Ω–∏–µ)
   */
  async suggestOrganization(query: string, count = 10) {
    try {
      const response = await this.suggestClient.post('/suggest/party', {
        query,
        count,
      });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –§–ò–û
   */
  async suggestName(query: string, parts?: Array<'NAME' | 'SURNAME' | 'PATRONYMIC'>, count = 10) {
    try {
      const response = await this.suggestClient.post('/suggest/fio', {
        query,
        count,
        parts: parts || ['SURNAME', 'NAME', 'PATRONYMIC'],
      });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –§–ò–û');
    }
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ email
   */
  async suggestEmail(query: string, count = 10) {
    try {
      const response = await this.suggestClient.post('/suggest/email', {
        query,
        count,
      });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ email');
    }
  }

  /**
   * –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –±–∞–Ω–∫–∞–º (–ë–ò–ö, –Ω–∞–∑–≤–∞–Ω–∏–µ)
   */
  async suggestBank(query: string, count = 10) {
    try {
      const response = await this.suggestClient.post('/suggest/bank', {
        query,
        count,
      });
      return response.data;
    } catch (error: any) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–∞–Ω–∫–∞');
    }
  }

  // ========== 4. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CDEK ==========

  /**
   * –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è CDEK –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ Dadata
   */
  extractForCdek(cleanedAddress: any) {
    return {
      // –î–ª—è CDEK API
      city: cleanedAddress.city || cleanedAddress.settlement || '',
      postal_code: cleanedAddress.postal_code || '',
      address: cleanedAddress.result || '',
      country_code: cleanedAddress.country_iso_code || 'RU',
      
      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      latitude: cleanedAddress.geo_lat ? parseFloat(cleanedAddress.geo_lat) : null,
      longitude: cleanedAddress.geo_lon ? parseFloat(cleanedAddress.geo_lon) : null,
      
      // –ö–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö CDEK
      region_code: cleanedAddress.region_code ? Number(cleanedAddress.region_code) : null,
      fias_id: cleanedAddress.fias_id || '',
      kladr_id: cleanedAddress.kladr_id || '',
      
      // –î–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞
      region: cleanedAddress.region || '',
      street: cleanedAddress.street || '',
      house: cleanedAddress.house || '',
      flat: cleanedAddress.flat || '',
      
      // –ö–æ–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞
      qc: cleanedAddress.qc,
      qc_complete: cleanedAddress.qc_complete,
      qc_house: cleanedAddress.qc_house,
      qc_geo: cleanedAddress.qc_geo,
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –¥–ª—è CDEK
   */
  async getAddressForCdek(query: string) {
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const suggestions = await this.suggestAddress(query, { count: 1 });
      
      if (!suggestions.suggestions || suggestions.suggestions.length === 0) {
        return null;
      }

      const suggestion = suggestions.suggestions[0];
      const data = suggestion.data;

      // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è CDEK
      return {
        // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        value: suggestion.value,
        unrestricted_value: suggestion.unrestricted_value,
        
        // –î–ª—è CDEK location
        postal_code: data.postal_code,
        country_code: data.country_iso_code || 'RU',
        city: data.city || data.settlement,
        address: data.street_with_type
          ? `${data.street_with_type}${data.house ? `, –¥ ${data.house}` : ''}${data.flat ? `, –∫–≤ ${data.flat}` : ''}`
          : suggestion.value,
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude: data.geo_lat ? parseFloat(data.geo_lat) : null,
        longitude: data.geo_lon ? parseFloat(data.geo_lon) : null,
        
        // –ö–æ–¥—ã
        fias_id: data.fias_id,
        kladr_id: data.kladr_id,
        
        // –î–µ—Ç–∞–ª–∏
        region: data.region,
        region_code: data.region_code,
        city_code: null, // CDEK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–∏ –∫–æ–¥—ã, –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ /location/suggest/cities
        
        // –ö–∞—á–µ—Å—Ç–≤–æ
        qc_geo: data.qc_geo,
        qc_complete: data.qc_complete,
        
        // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_data: data,
      };
    } catch (error: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è CDEK:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  checkAddressQuality(cleanedAddress: any): {
    suitable: boolean;
    quality: 'excellent' | 'good' | 'medium' | 'poor';
    issues: string[];
  } {
    const issues: string[] = [];

    // –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ (qc)
    if (cleanedAddress.qc === 0) {
      // –û—Ç–ª–∏—á–Ω–æ
    } else if (cleanedAddress.qc === 1) {
      issues.push('–û—Å—Ç–∞–ª–∏—Å—å –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
    } else if (cleanedAddress.qc === 2) {
      issues.push('–ê–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ –º—É—Å–æ—Ä–Ω—ã–π');
      return { suitable: false, quality: 'poor', issues };
    } else if (cleanedAddress.qc === 3) {
      issues.push('–ï—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã');
    }

    // –ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ (qc_complete)
    const qcComplete = cleanedAddress.qc_complete;
    if (qcComplete === 0) {
      // –û—Ç–ª–∏—á–Ω–æ
    } else if ([5, 8, 9, 10].includes(qcComplete)) {
      issues.push(this.getQcCompleteMessage(qcComplete));
    } else if ([1, 2, 3, 4, 6, 7].includes(qcComplete)) {
      issues.push(`–ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: ${this.getQcCompleteMessage(qcComplete)}`);
      return { suitable: false, quality: 'poor', issues };
    }

    // –ù–∞–ª–∏—á–∏–µ –¥–æ–º–∞ –≤ –§–ò–ê–° (qc_house) –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (qc_geo)
    if (cleanedAddress.qc_house === 2 && cleanedAddress.qc_geo === 0) {
      // –ò–¥–µ–∞–ª—å–Ω–æ
    } else if (cleanedAddress.qc_house === 10) {
      if (cleanedAddress.qc_geo === 0) {
        issues.push('–î–æ–º –Ω–µ –≤ –§–ò–ê–°, –Ω–æ –µ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö');
      } else if (cleanedAddress.qc_geo === 1) {
        issues.push('–î–æ–º –Ω–µ –≤ –§–ò–ê–°, –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –∫–∞—Ä—Ç–∞—Ö');
      } else {
        issues.push('–î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return { suitable: false, quality: 'poor', issues };
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    let quality: 'excellent' | 'good' | 'medium' | 'poor';
    if (issues.length === 0) {
      quality = 'excellent';
    } else if (issues.length === 1) {
      quality = 'good';
    } else if (issues.length === 2) {
      quality = 'medium';
    } else {
      quality = 'poor';
    }

    return {
      suitable: quality !== 'poor',
      quality,
      issues,
    };
  }

  private getQcCompleteMessage(code: number): string {
    const messages: Record<number, string> = {
      0: '–ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
      1: '–ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞',
      2: '–ù–µ—Ç –≥–æ—Ä–æ–¥–∞',
      3: '–ù–µ—Ç —É–ª–∏—Ü—ã',
      4: '–ù–µ—Ç –¥–æ–º–∞',
      5: '–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã',
      6: '–ù–µ–ø–æ–ª–Ω—ã–π',
      7: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π',
      8: '–î–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è',
      9: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–æ—Ä–∞',
      10: '–î–æ–º–∞ –Ω–µ—Ç –≤ –§–ò–ê–°',
    };
    return messages[code] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥: ${code}`;
  }

  // ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

  private handleError(error: any, message: string): never {
    const status = error.response?.status;
    const data = error.response?.data;

    let errorMessage = message;
    let httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;

    switch (status) {
      case 400:
        errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Dadata';
        httpStatus = HttpStatus.BAD_REQUEST;
        break;
      case 401:
        errorMessage = 'API-–∫–ª—é—á Dadata –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π';
        httpStatus = HttpStatus.UNAUTHORIZED;
        break;
      case 403:
        errorMessage = '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ—á—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ Dadata';
        httpStatus = HttpStatus.FORBIDDEN;
        break;
      case 405:
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π HTTP-–º–µ—Ç–æ–¥';
        httpStatus = HttpStatus.METHOD_NOT_ALLOWED;
        break;
      case 413:
        errorMessage = '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞';
        httpStatus = HttpStatus.PAYLOAD_TOO_LARGE;
        break;
      case 429:
        errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Dadata';
        httpStatus = HttpStatus.TOO_MANY_REQUESTS;
        break;
      default:
        if (status >= 500) {
          errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Dadata';
          httpStatus = HttpStatus.BAD_GATEWAY;
        }
    }

    this.logger.error(`${errorMessage}:`, data || error.message);

    throw new HttpException(
      {
        success: false,
        message: errorMessage,
        error: data || error.message,
      },
      httpStatus,
    );
  }
}
