// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователей системы
model User {
  id          Int       @id @default(autoincrement())
  phone       String    @unique
  password    String
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Связь с refresh токенами
  refreshTokens RefreshToken[]

  @@map("users")
}

// Модель для refresh токенов
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.Text
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  
  // Связь с пользователем
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Модель для хранения токенов авторизации CDEK
model CdekToken {
  id           Int      @id @default(autoincrement())
  accessToken  String   @map("access_token") @db.Text
  tokenType    String   @map("token_type")
  expiresIn    Int      @map("expires_in")
  scope        String?
  jti          String?
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")

  @@map("cdek_tokens")
}

// Модель для логирования запросов к CDEK API
model ApiLog {
  id          Int      @id @default(autoincrement())
  method      String
  endpoint    String
  requestData String?  @db.Text
  responseData String? @db.Text
  statusCode  Int?
  duration    Int?     // в миллисекундах
  createdAt   DateTime @default(now()) @map("created_at")
  success     Boolean  @default(false)

  @@map("api_logs")
}

// Модель для хранения информации о заказах CDEK (для кэширования)
model CdekOrder {
  id           Int      @id @default(autoincrement())
  cdekOrderId  String   @unique @map("cdek_order_id")
  orderData    Json     @map("order_data")
  status       String?
  lastUpdated  DateTime @default(now()) @map("last_updated")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("cdek_orders")
}

// Модель для кэширования информации о пунктах выдачи
model DeliveryPoint {
  id          Int      @id @default(autoincrement())
  cdekCode    String   @unique @map("cdek_code")
  name        String
  address     String
  city        String
  coordinates Json?    // {lat: number, lon: number}
  workTime    String?  @map("work_time")
  phone       String?
  services    Json?    // массив доступных услуг
  isActive    Boolean  @default(true) @map("is_active")
  lastUpdated DateTime @default(now()) @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("delivery_points")
}
